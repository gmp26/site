// Generated by LiveScript 1.2.0
(function(){
  "use strict";
  var path;
  path = require('path');
  module.exports = function(grunt){
    var async, compile;
    async = grunt.util.async;
    compile = function(args, cb){
      var tmpCmd, filepath, tmpCwd, tmpName, tmpArgs, child;
      tmpCmd = args.shift();
      filepath = args.pop();
      tmpCwd = path.dirname(filepath);
      tmpName = path.basename(filepath);
      args.push(tmpName);
      tmpArgs = args.slice(0);
      if (!grunt.option('verbose')) {
        grunt.log.write(filepath + "...");
      }
      child = grunt.util.spawn({
        cmd: tmpCmd,
        args: tmpArgs,
        opts: {
          cwd: tmpCwd
        }
      }, function(err, result, code){
        var success;
        success = deepEq$(code, 0, '===');
        if (deepEq$(code, 127, '===')) {
          return grunt.warn('You need to have a LaTeX distribution with lualatex installed ' + 'and in your system PATH for this task to work.');
        }
        if (deepEq$(code, 1, '===') && /Output written on/g.test(result.stdout)) {
          success = true;
        }
        if (!grunt.option('verbose')) {
          if (success) {
            grunt.log.ok();
          } else {
            grunt.log.error();
          }
        } else {
          if (!success) {
            grunt.log.error("Failed to create file: " + filepath);
          }
        }
        return cb();
      });
      if (grunt.option('verbose')) {
        child.stdout.pipe(process.stdout);
      }
      return child.stderr.pipe(process.stderr);
    };
    return grunt.registerMultiTask('latex', 'Compile a LaTeX source file to PDF', function(){
      var done, args;
      done = this.async;
      args = ['lualatex', '--interaction=nonstopmode', '--halt-on-error'];
      grunt.log.writeln("Creating pdfs with " + args[0] + ":");
      return async.forEachSeries(this.filesSrc, function(f, cb){
        var tmpArgs;
        tmpArgs = args.slice(0);
        tmpArgs.push(f);
        return compile(tmpArgs, cb);
      }, done());
    });
  };
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
